import streamlit as st
from audio_effects import (chipmunk_effect, robot_effect, echo_effect,
                           electronic_voice_effect, stutter_effect,
                           process_voice, text_to_speech, speech_to_text)
from st_audiorec import st_audiorec
from googletrans import Translator
from pydub import AudioSegment
import librosa
import soundfile as sf
import numpy as np
import os

st.set_page_config(
      page_title="·ª®ng d·ª•ng √Çm thanh",
      page_icon="üéµ",
      layout="wide",
      initial_sidebar_state="expanded",
   )
# CSS t√πy ch·ªânh v·ªõi icon v√† hi·ªáu ·ª©ng
st.markdown(
    """
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');

    body {
        background-color: #121212;
        color: #ffffff;
        font-family: 'Roboto', sans-serif;
    }
    .stButton>button {
        background-color: #6200ea;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .stButton>button:hover {
        background-color: #3700b3;
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0,0,0,0.2);
    }
    .stTextInput>div>input, .stTextArea>div>textarea {
        background-color: #1e1e1e;
        color: white;
        border: 1px solid #6200ea;
        border-radius: 5px;
        padding: 10px;
    }
    .stRadio>div>label, .stSlider>div>label {
        color: #ffffff;
    }
    .stImage > img {
        width: 100%;
        max-width: 100%;
        height: auto;
        object-fit: contain;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        margin: 20px 0;
    }
    .icon-button {
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }
    .material-icons {
        font-size: 20px;
        margin-right: 8px;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng v·ªõi icon
st.title("üéµ Sound Application")

# ƒê·ªãnh nghƒ©a t·ª´ ƒëi·ªÉn 'languages' ·ªü ph·∫°m vi to√†n c·ª•c
languages = {
    "Ti·∫øng Vi·ªát": "vi",
    "Ti·∫øng Anh": "en",
    "Ti·∫øng Ph√°p": "fr",
    "Ti·∫øng ƒê·ª©c": "de",
    "Ti·∫øng T√¢y Ban Nha": "es",
    "Ti·∫øng √ù": "it",
    "Ti·∫øng B·ªì ƒê√†o Nha": "pt",
    "Ti·∫øng Nga": "ru",
    "Ti·∫øng Nh·∫≠t": "ja",
    "Ti·∫øng H√†n": "ko"
}

# Sidebar for navigation
st.sidebar.title("üéØ Ch·ªçn ch·ª©c nƒÉng")
option = st.sidebar.selectbox("Ch·ªçn m·ªôt ch·ª©c nƒÉng:",
                              ["Hi·ªáu ·ª©ng √¢m thanh", "Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i", "Nh·∫≠n di·ªán gi·ªçng n√≥i"])

if option == "Hi·ªáu ·ª©ng √¢m thanh":
    st.header("üéº Hi·ªáu ·ª©ng √Çm thanh")

    st.write("Nh·∫•n ƒë·ªÉ ghi √¢m gi·ªçng n√≥i:")
    audio_data = st_audiorec()
    audio_file = st.file_uploader("üì• T·∫£i t·ªáp √¢m thanh l√™n", type=["wav", "mp3"])

    effect_type = st.selectbox(
        "üéõÔ∏è Ch·ªçn hi·ªáu ·ª©ng √¢m thanh",
        ["Gi·ªçng Chipmunk", "Gi·ªçng Robot", "Hi·ªáu ·ª©ng Echo", "Gi·ªçng ƒêi·ªán T·ª≠", "Hi·ªáu ·ª©ng Stutter", "X·ª≠ l√Ω ti·∫øng n√≥i"]
    )

    # C√°c tham s·ªë cho hi·ªáu ·ª©ng
    if effect_type == "Hi·ªáu ·ª©ng Echo":
        delay = st.slider("‚è±Ô∏è ƒê·ªô tr·ªÖ (s) cho Echo", 0.1, 1.0, 0.2, step=0.1)
    else:
        delay = 0.2

    if effect_type == "Hi·ªáu ·ª©ng Stutter":
        repeat = st.slider("üîÅ S·ªë l·∫ßn l·∫∑p l·∫°i cho Stutter", 1, 5, 3, step=1)
    else:
        repeat = 3

    # N√∫t √°p d·ª•ng hi·ªáu ·ª©ng v·ªõi icon
    if st.button("‚ú® √Åp d·ª•ng hi·ªáu ·ª©ng"):
        if audio_file is not None or audio_data is not None:
            # L∆∞u t·ªáp √¢m thanh t·∫°m th·ªùi
            if audio_file is not None:
                with open("temp_audio.wav", "wb") as f:
                    f.write(audio_file.getbuffer())
            elif audio_data is not None:
                with open("temp_audio.wav", "wb") as f:
                    f.write(audio_data)

            # √Åp d·ª•ng hi·ªáu ·ª©ng
            if effect_type == "Gi·ªçng Chipmunk":
                processed_audio_path, waveform_path = chipmunk_effect("temp_audio.wav")
            elif effect_type == "Gi·ªçng Robot":
                processed_audio_path, waveform_path = robot_effect("temp_audio.wav")
            elif effect_type == "Hi·ªáu ·ª©ng Echo":
                processed_audio_path, waveform_path = echo_effect("temp_audio.wav", delay)
            elif effect_type == "Gi·ªçng ƒêi·ªán T·ª≠":
                processed_audio_path, waveform_path = electronic_voice_effect("temp_audio.wav")
            elif effect_type == "Hi·ªáu ·ª©ng Stutter":
                processed_audio_path, waveform_path = stutter_effect("temp_audio.wav", repeat)
            elif effect_type == "X·ª≠ l√Ω ti·∫øng n√≥i":
                processed_audio_path, waveform_path = process_voice("temp_audio.wav", delay=delay)

            # Hi·ªÉn th·ªã √¢m thanh ƒë√£ x·ª≠ l√Ω
            st.audio(processed_audio_path)

            # Hi·ªÉn th·ªã ƒë·ªì th·ªã s√≥ng √¢m
            st.image(waveform_path, use_container_width=True)

elif option == "Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i":
    st.header("üó£Ô∏è Chuy·ªÉn ƒë·ªïi VƒÉn b·∫£n th√†nh Gi·ªçng n√≥i")
    text_input = st.text_area("üí¨ Nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ chuy·ªÉn ƒë·ªïi th√†nh gi·ªçng n√≥i", placeholder="Nh·∫≠p vƒÉn b·∫£n ·ªü ƒë√¢y...", height=200)

    # Ch·ªçn ng√¥n ng·ªØ ƒë·∫ßu v√†o
    input_language_name = st.selectbox("üåê Ch·ªçn ng√¥n ng·ªØ ƒë·∫ßu v√†o:", list(languages.keys()))
    input_language = languages[input_language_name]

    # Ch·ªçn ng√¥n ng·ªØ ƒë·∫ßu ra
    output_language_name = st.selectbox("üåê Ch·ªçn ng√¥n ng·ªØ ƒë·∫ßu ra:", list(languages.keys()))
    output_language = languages[output_language_name]

    # N√∫t chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v·ªõi icon
    if st.button("üîä Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i"):
        if text_input:
            # D·ªãch vƒÉn b·∫£n sang ng√¥n ng·ªØ ƒë·∫ßu ra
            translator = Translator()
            translated_text = translator.translate(text_input, src=input_language, dest=output_language).text
            tts_output_path = text_to_speech(translated_text, output_language)
            st.audio(tts_output_path)

elif option == "Nh·∫≠n di·ªán gi·ªçng n√≥i":
    st.header("üìù Nh·∫≠n di·ªán Gi·ªçng n√≥i")
    st.subheader("üé§ Ghi √¢m gi·ªçng n√≥i tr·ª±c ti·∫øp")

    st.write("Nh·∫•n ƒë·ªÉ ghi √¢m gi·ªçng n√≥i:")
    audio_data = st_audiorec()

    # Danh s√°ch c√°c ng√¥n ng·ªØ cho nh·∫≠n di·ªán gi·ªçng n√≥i
    stt_languages = {
        "Ti·∫øng Vi·ªát": "vi-VN",
        "Ti·∫øng Anh": "en-US",
        "Ti·∫øng Ph√°p": "fr-FR",
        "Ti·∫øng ƒê·ª©c": "de-DE",
        "Ti·∫øng T√¢y Ban Nha": "es-ES",
        "Ti·∫øng √ù": "it-IT",
        "Ti·∫øng B·ªì ƒê√†o Nha": "pt-PT",
        "Ti·∫øng Nga": "ru-RU",
        "Ti·∫øng Nh·∫≠t": "ja-JP",
        "Ti·∫øng H√†n": "ko-KR"
    }

    # Ch·ªçn ng√¥n ng·ªØ ƒë·∫ßu v√†o
    input_language_name = st.selectbox("üåê Ch·ªçn ng√¥n ng·ªØ ƒë·∫ßu v√†o:", list(stt_languages.keys()))
    input_language = stt_languages[input_language_name]

    # Ch·ªçn ng√¥n ng·ªØ d·ªãch sang (s·ª≠ d·ª•ng t·ª´ ƒëi·ªÉn languages ·ªü tr√™n)
    output_language_name = st.selectbox("üåê Ch·ªçn ng√¥n ng·ªØ d·ªãch sang:", list(languages.keys()))
    output_language = languages[output_language_name]

    if st.button("üåü Nh·∫≠n di·ªán v√† D·ªãch thu·∫≠t"):
        if audio_data is not None:
            # L∆∞u t·ªáp √¢m thanh t·∫°m th·ªùi
            with open("temp_audio.wav", "wb") as f:
                f.write(audio_data)

            # Nh·∫≠n di·ªán gi·ªçng n√≥i
            stt_result = speech_to_text("temp_audio.wav", language=input_language)
            # Hi·ªÉn th·ªã vƒÉn b·∫£n nh·∫≠n di·ªán
            st.text_area("üìù VƒÉn b·∫£n t·ª´ gi·ªçng n√≥i", value=stt_result, height=200)

            # D·ªãch vƒÉn b·∫£n
            translator = Translator()
            # L·∫•y m√£ ng√¥n ng·ªØ g·ªëc t·ª´ input_language (v√≠ d·ª•: 'vi-VN' -> 'vi')
            src_language_code = input_language.split("-")[0]
            translated_text = translator.translate(stt_result, src=src_language_code, dest=output_language).text
            st.text_area("üåê VƒÉn b·∫£n sau khi d·ªãch", value=translated_text, height=200)

# H√†m cleanup
def cleanup():
    temp_files = ["temp_audio.wav", "speed_adjusted_audio.wav"]
    for file in temp_files:
        try:
            if os.path.exists(file):
                os.remove(file)
        except Exception as e:
            st.error(f"L·ªói khi x√≥a file t·∫°m th·ªùi: {e}")

# Th√™m n√∫t cleanup trong sidebar v·ªõi icon
if st.sidebar.button("üßπ D·ªçn d·∫πp file t·∫°m"):
    cleanup()
    st.sidebar.success("‚úÖ ƒê√£ x√≥a c√°c file t·∫°m th·ªùi!")
