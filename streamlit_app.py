import streamlit as st
from audio_effects import (chipmunk_effect, robot_effect, echo_effect,
                         electronic_voice_effect, stutter_effect,
                         process_voice, text_to_speech, speech_to_text)
from st_audiorec import st_audiorec
from googletrans import Translator
from pydub import AudioSegment
import librosa
import soundfile as sf
import numpy as np
import os

# CSS t√πy ch·ªânh
st.markdown(
    """
    <style>
    body {
        background-color: #121212;
        color: #ffffff;
        font-family: 'Arial', sans-serif;
    }
    .stButton>button {
        background-color: #6200ea;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    .stButton>button:hover {
        background-color: #3700b3;
    }
    .stTextInput>div>input {
        background-color: #1e1e1e;
        color: white;
        border: 1px solid #6200ea;
        border-radius: 5px;
        padding: 10px;
    }
    .stTextArea>div>textarea {
        background-color: #1e1e1e;
        color: white;
        border: 1px solid #6200ea;
        border-radius: 5px;
        padding: 10px;
    }
    .stRadio>div>label {
        color: #ffffff;
    }
    .stSlider>div>label {
        color: #ffffff;
    }
    .stImage > img {
        width: 100%;
        max-width: 100%;
        height: auto;
        object-fit: contain;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        margin: 20px 0;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("Sound Application")

# Sidebar for navigation
st.sidebar.title("Ch·ªçn ch·ª©c nƒÉng")
option = st.sidebar.radio("Ch·ªçn m·ªôt ch·ª©c nƒÉng:",
                         ["Hi·ªáu ·ª©ng √¢m thanh", "Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i", "Nh·∫≠n di·ªán gi·ªçng n√≥i"])

if option == "Hi·ªáu ·ª©ng √¢m thanh":
    st.header("Hi·ªáu ·ª©ng √Çm thanh")

    st.write("Nh·∫•n ƒë·ªÉ ghi √¢m gi·ªçng n√≥i")
    audio_data = st_audiorec()
    audio_file = st.file_uploader("T·∫£i t·ªáp √¢m thanh l√™n", type=["wav", "mp3"])

    effect_type = st.radio(
        "Ch·ªçn hi·ªáu ·ª©ng √¢m thanh",
        ["Gi·ªçng Chipmunk", "Gi·ªçng Robot", "Hi·ªáu ·ª©ng Echo", "Gi·ªçng ƒêi·ªán T·ª≠", "Hi·ªáu ·ª©ng Stutter", "X·ª≠ l√Ω ti·∫øng n√≥i"]
    )

    # C√°c tham s·ªë cho hi·ªáu ·ª©ng
    if effect_type == "Hi·ªáu ·ª©ng Echo":
        delay = st.slider("ƒê·ªô tr·ªÖ (s) cho Echo", 0.1, 1.0, 0.2)
    else:
        delay = 0.2

    if effect_type == "Hi·ªáu ·ª©ng Stutter":
        repeat = st.slider("S·ªë l·∫ßn l·∫∑p l·∫°i cho Stutter", 1, 5, 3)
    else:
        repeat = 3

    # N√∫t √°p d·ª•ng hi·ªáu ·ª©ng
    if st.button("√Åp d·ª•ng hi·ªáu ·ª©ng"):
        if audio_file is not None or audio_data is not None:
            # L∆∞u t·ªáp √¢m thanh t·∫°m th·ªùi
            if audio_file is not None:
                with open("temp_audio.wav", "wb") as f:
                    f.write(audio_file.getbuffer())
            elif audio_data is not None:
                with open("temp_audio.wav", "wb") as f:
                    f.write(audio_data)

            # √Åp d·ª•ng hi·ªáu ·ª©ng
            if effect_type == "Gi·ªçng Chipmunk":
                processed_audio_path, waveform_path = chipmunk_effect("temp_audio.wav")
            elif effect_type == "Gi·ªçng Robot":
                processed_audio_path, waveform_path = robot_effect("temp_audio.wav")
            elif effect_type == "Hi·ªáu ·ª©ng Echo":
                processed_audio_path, waveform_path = echo_effect("temp_audio.wav", delay)
            elif effect_type == "Gi·ªçng ƒêi·ªán T·ª≠":
                processed_audio_path, waveform_path = electronic_voice_effect("temp_audio.wav")
            elif effect_type == "Hi·ªáu ·ª©ng Stutter":
                processed_audio_path, waveform_path = stutter_effect("temp_audio.wav", repeat)
            elif effect_type == "X·ª≠ l√Ω ti·∫øng n√≥i":
                processed_audio_path, waveform_path = process_voice("temp_audio.wav", delay=delay)

            # Hi·ªÉn th·ªã √¢m thanh ƒë√£ x·ª≠ l√Ω
            st.audio(processed_audio_path)

            # Hi·ªÉn th·ªã ƒë·ªì th·ªã s√≥ng √¢m
            st.write("### Ph√¢n t√≠ch d·∫°ng s√≥ng")
            st.image(waveform_path, use_container_width=True)

elif option == "Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i":
    st.header("Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i")
    text_input = st.text_area("Nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ chuy·ªÉn ƒë·ªïi th√†nh gi·ªçng n√≥i", placeholder="Nh·∫≠p vƒÉn b·∫£n ·ªü ƒë√¢y...")

    # Ch·ªçn ng√¥n ng·ªØ ƒë·∫ßu v√†o
    input_language = st.selectbox("Ch·ªçn ng√¥n ng·ªØ ƒë·∫ßu v√†o:", ["vi", "en", "fr", "de", "es", "it", "pt", "ru", "ja", "ko"])

    # Ch·ªçn ng√¥n ng·ªØ ƒë·∫ßu ra
    output_language = st.selectbox("Ch·ªçn ng√¥n ng·ªØ ƒë·∫ßu ra:", ["vi", "en", "fr", "de", "es", "it", "pt", "ru", "ja", "ko"])

    # N√∫t chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i
    if st.button("Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i"):
        if text_input:
            # D·ªãch vƒÉn b·∫£n sang ng√¥n ng·ªØ ƒë·∫ßu ra
            translator = Translator()
            translated_text = translator.translate(text_input, src=input_language, dest=output_language).text
            tts_output_path = text_to_speech(translated_text, output_language)
            st.audio(tts_output_path)

elif option == "Nh·∫≠n di·ªán gi·ªçng n√≥i":
    st.header("Nh·∫≠n di·ªán gi·ªçng n√≥i")
    st.subheader("üé§ Ghi √¢m gi·ªçng n√≥i tr·ª±c ti·∫øp")

    st.write("Nh·∫•n ƒë·ªÉ ghi √¢m gi·ªçng n√≥i")
    audio_data = st_audiorec()

    # Ch·ªçn ng√¥n ng·ªØ ƒë·∫ßu v√†o
    input_language = st.selectbox("Ch·ªçn ng√¥n ng·ªØ ƒë·∫ßu v√†o:", ["vi-VN", "en-US", "fr-FR", "de-DE", "es-ES", "it-IT", "pt-PT", "ru-RU", "ja-JP", "ko-KR"])

    # Ch·ªçn ng√¥n ng·ªØ d·ªãch sang
    output_language = st.selectbox("Ch·ªçn ng√¥n ng·ªØ d·ªãch sang:", ["vi", "en", "fr", "de", "es", "it", "pt", "ru", "ja", "ko"])

    if st.button("Nh·∫≠n di·ªán v√† D·ªãch thu·∫≠t"):
        if audio_data is not None:
            # L∆∞u t·ªáp √¢m thanh t·∫°m th·ªùi
            with open("temp_audio.wav", "wb") as f:
                f.write(audio_data)

            # Nh·∫≠n di·ªán gi·ªçng n√≥i
            stt_result = speech_to_text("temp_audio.wav", language=input_language)
            # Hi·ªÉn th·ªã vƒÉn b·∫£n nh·∫≠n di·ªán
            st.text_area("VƒÉn b·∫£n t·ª´ gi·ªçng n√≥i", value=stt_result, height=200)

            # D·ªãch vƒÉn b·∫£n
            translator = Translator()
            translated_text = translator.translate(stt_result, src=input_language.split("-")[0], dest=output_language).text
            st.text_area("VƒÉn b·∫£n sau khi d·ªãch", value=translated_text, height=200)

# H√†m cleanup
def cleanup():
    temp_files = ["temp_audio.wav", "speed_adjusted_audio.wav"]
    for file in temp_files:
        try:
            if os.path.exists(file):
                os.remove(file)
        except Exception as e:
            st.error(f"L·ªói khi x√≥a file t·∫°m th·ªùi: {e}")

# Th√™m n√∫t cleanup trong sidebar
if st.sidebar.button("D·ªçn d·∫πp file t·∫°m"):
    cleanup()
    st.sidebar.success("ƒê√£ x√≥a c√°c file t·∫°m th·ªùi!")
